cmake_minimum_required(VERSION 3.13.1)

project(mkits)

option(BUILD_SHARED "build shared library" ON)
option(BUILD_STATIC "build static library" ON)

option(BUILD_MCKITS "build mckits" ON)
option(BUILD_MCPPKITS "build mcppkits" ON)
option(BUILD_UNITTEST "build unittest" OFF)
option(BUILD_BENCH "build bench" OFF)

message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  add_definitions(-DDEBUG)
else()
  add_definitions(-DNDEBUG)
endif()

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED True)
set(CMAKE_C_FLAGS_DEBUG "-std=c11 -Wall -Werror -g")
set(CMAKE_C_FLAGS_RELEASE "-std=c11 -Wall -Werror -O3")

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_FLAGS_DEBUG "-std=c++11 -Wall -Werror -g")
set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -Wall -Werror -O3")

set(SOLUTION_HOME ${CMAKE_CURRENT_LIST_DIR})
set(SOLUTION_INCLUDE_HOME "${SOLUTION_HOME}/include")
set(SOLUTION_SRC_HOME "${SOLUTION_HOME}/src")

message(STATUS "[mkits] SOLUTION_HOME: ${SOLUTION_HOME}")
message(STATUS "[mkits] SOLUTION_INCLUDE_HOME: ${SOLUTION_INCLUDE_HOME}")
message(STATUS "[mkits] SOLUTION_SRC_HOME: ${SOLUTION_SRC_HOME}")

if(WIN32)
  option(ENABLE_WINDUMP "Windows MiniDumpWriteDump" OFF)
  option(BUILD_FOR_MT "build for /MT" OFF)
  if(BUILD_FOR_MT)
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
  endif()

  add_definitions(-DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_WARNINGS -D_WIN32_WINNT=0x0600)
  set(mckits_libs ${mckits_libs} secur32 crypt32 winmm iphlpapi ws2_32)
  if(ENABLE_WINDUMP)
    add_definitions(-DENABLE_WINDUMP)
    set(mckits_libs ${mckits_libs} dbghelp)
  endif()
endif()

if(UNIX)
  # set(mckits_libs ${mckits_libs} pthread)
  set(mckits_libs ${mckits_libs} m)
  set(mckits_libs ${mckits_libs} dl)
  set(mckits_libs ${mckits_libs} rt)
  set(mckits_compile_options ${mckits_compile_options} -pthread)
  set(mckits_link_options ${mckits_link_options} -pthread)

  set(mcppkits_libs ${mcppkits_libs} m)
  set(mcppkits_libs ${mcppkits_libs} dl)
  set(mcppkits_libs ${mcppkits_libs} rt)
  set(mcppkits_libs ${mcppkits_libs} stdc++)
  set(mcppkits_compile_options ${mcppkits_compile_options} -pthread)
  set(mcppkits_link_options ${mcppkits_link_options} -pthread)
endif()

if(BUILD_MCKITS)
  add_subdirectory(src/mckits)
endif()

if(BUILD_MCPPKITS)
  add_subdirectory(src/mcppkits)
endif()

if(BUILD_UNITTEST)
  enable_testing()
  add_subdirectory(test/mckits)
  add_subdirectory(test/mcppkits)
endif()

if(BUILD_BENCH)
  add_subdirectory(bench/mckits)
endif()
